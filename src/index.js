const Parser = require("rss-parser");
const axios = require("axios");
const { Markup, Telegraf } = require("telegraf");
const { RSS_FEEDS, HUGGINGFACE_API_KEY, TELEGRAM_BOT_TOKEN, MISTRAL_API_KEY, TELEGRAM_CHAT_ID } = require("./config");
const { readDB, saveDB } = require("./db");
const fs = require('fs');
const { Mistral } = require('@mistralai/mistralai');

const parser = new Parser();
const bot = new Telegraf(TELEGRAM_BOT_TOKEN);

const client = new Mistral({ apiKey: MISTRAL_API_KEY });

async function translateToUkrainian(text) {
  try {
    console.log("–í–∏–∫–æ–Ω—É—î—Ç—å—Å—è –∑–∞–ø–∏—Ç –Ω–∞ –ø–µ—Ä–µ–∫–ª–∞–¥...");
    const response = await axios.post(
      "https://api-inference.huggingface.co/models/Helsinki-NLP/opus-mt-es-uk",
      { inputs: text },
      { headers: { Authorization: `Bearer ${HUGGINGFACE_API_KEY}` } }
    );

    console.log("–û—Ç—Ä–∏–º–∞–Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å:", response.data);
    if (!response.data || !Array.isArray(response.data) || response.data.length === 0) {
      throw new Error("–ü–æ—Ä–æ–∂–Ω—è –≤—ñ–¥–ø–æ–≤—ñ–¥—å –≤—ñ–¥ API");
    }

    return response.data[0]?.translation_text || text;
  } catch (error) {
    console.error("–ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–∫–ª–∞–¥—É:", error.response?.data || error.message);
    return text;
  }
}

async function fetchRSS() {
  console.log("üîÑ –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è RSS-—Å—Ç—Ä—ñ—á–æ–∫...");
  const articles = (await Promise.all(RSS_FEEDS.map(async (url) => {
    try {
      const feed = await parser.parseURL(url);
      console.log(`‚úÖ –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ ${feed.items.length} —Å—Ç–∞—Ç–µ–π –∑ ${url}`);
      return feed.items.map(item => {
        let imageUrl = null;
        const imageUrlMatch = item['content:encoded']?.match(/<img[^>]+src="([^"]+)"/);
        if (imageUrlMatch) {
          imageUrl = imageUrlMatch[1];
        } else if (item?.media?.content?.url) {
          imageUrl = item.media.content.url;
        } else if (item?.link) {
          imageUrl = item.link;
        }
        return {
          title: item.title,
          link: item.link,
          content: item.contentSnippet ?? item.content ?? "–ë–µ–∑ –æ–ø–∏—Å—É",
          pubDate: new Date(item.pubDate),
          imageUrl: imageUrl,
        };
      });
    } catch (error) {
      console.error(`‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è RSS –∑ ${url}:`, error.message);
      return [];
    }
  }))).flat();

  return articles.sort((a, b) => new Date(b.pubDate) - new Date(a.pubDate));
}

function extractLinks(html) {
  let links = [];
  let textWithPlaceholders = html.replace(
    /<a[^>]+href="([^"]+)"[^>]*>(.*?)<\/a>/g,
    (match, url, text) => {
      links.push({ text, url });
      return `[LINK]`;
    }
  );
  return { textWithPlaceholders, links };
}

function restoreLinks(translatedText, links) {
  let index = 0;
  return translatedText.replace(/\[LINK\]/g, () => {
    if (index < links.length) {
      return `${links[index].text} (${links[index].url})`;
    }
    return "";
  });
}

async function processArticleContent(html) {
  const { textWithPlaceholders, links } = extractLinks(html);
  let translated = await translateToUkrainian(textWithPlaceholders);
  return restoreLinks(translated, links);
}



async function checkForNewArticles() {
  console.log("üîé –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–æ–≤–∏—Ö —Å—Ç–∞—Ç–µ–π...");
  const db = readDB();
  const newArticles = await fetchRSS();
  const getLatestPubDate = () => {
    let date = new Date(0);
    newArticles.forEach(e => {
      if (new Date(e.pubDate) > date) {
        date = new Date(e.pubDate);
      }
    });
    return date;
  };

  const lastProcessedDate = db.lastProcessedDate || getLatestPubDate();
  let addedArticles = newArticles.filter(article => new Date(article.pubDate) > new Date(lastProcessedDate));

  if (addedArticles.length > 0) {
    console.log(`üì¢ –ù–æ–≤–∏—Ö —Å—Ç–∞—Ç–µ–π: ${addedArticles.length}`);
    for (const article of addedArticles) {
      console.log(`üì© –û–±—Ä–æ–±–∫–∞ —Å—Ç–∞—Ç—Ç—ñ: ${article.title}`);

      article.title = await translateToUkrainian(article.title);
      article.summary = await await processArticleContent(article.content);

      console.log(`üì© –°—Ç–∞—Ç—Ç—ñ: ${article}`);

      let messageSent;
      if (article.imageUrl) {
        messageSent = await sendTelegramMessage(
          `üì∞ *${article.title}*\n\n${article.summary}\n\n[–ß–∏—Ç–∞—Ç–∏ –±—ñ–ª—å—à–µ](${article.link})`,
          article.imageUrl
        );
      } else {
        messageSent = await sendTelegramMessage(
          `üì∞ *${article.title}*\n\n${article.summary}\n\n[–ß–∏—Ç–∞—Ç–∏ –±—ñ–ª—å—à–µ](${article.link})`
        );
      }

      if (messageSent) {
        db.articles.push(article);
        db.lastProcessedDate = article.pubDate;
        console.log(`‚úÖ –°—Ç–∞—Ç—Ç—è –Ω–∞–¥—ñ—Å–ª–∞–Ω–∞: ${article.title}`);
      } else {
        console.error(`‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ —Å—Ç–∞—Ç—Ç—é: ${article.title}`);
      }
    }

    saveDB(db);
    console.log(`üíæ –ó–±–µ—Ä–µ–∂–µ–Ω–æ ${addedArticles.length} –Ω–æ–≤–∏—Ö —Å—Ç–∞—Ç–µ–π —É –±–∞–∑—É`);
  } else {
    console.log("üîç –ù–æ–≤–∏—Ö —Å—Ç–∞—Ç–µ–π –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ");
  }
}

// checkForNewArticles()

async function summarizer(text) {
  console.log("üìú –£–∑–∞–≥–∞–ª—å–Ω–µ–Ω–Ω—è —Ç–µ–∫—Å—Ç—É...");
  try {
    const sentences = text.split(". ");
    text = sentences.slice(0, Math.min(sentences.length, 5)).join(". ") + ".";

    const response = await axios.post(
      "https://api-inference.huggingface.co/models/facebook/bart-large-cnn",
      { inputs: text },
      { headers: { Authorization: `Bearer ${HUGGINGFACE_API_KEY}` } }
    );

    const summary = response.data?.[0]?.summary_text;
    return summary ? await translateToUkrainian(summary) : await translateToUkrainian(text);
  } catch (error) {
    console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ —É–∑–∞–≥–∞–ª—å–Ω–µ–Ω–Ω—è:", error.message);
    return await translateToUkrainian(text.split(".").slice(0, 3).join(".") + "...");
  }
}

let userChatId = 369600113;

async function sendTelegramMessage(message, photo) {
  if (!userChatId) {
    console.error("‚ùå –ù–µ –≤–∫–∞–∑–∞–Ω–æ chat_id –¥–ª—è –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è");
    return false;
  }

  console.log("‚úâÔ∏è –ù–∞–¥—Å–∏–ª–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤ Telegram...");
  try {
    if (photo) {
      await axios.post(`https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendPhoto`, {
        chat_id: userChatId,
        photo: photo,
        caption: message,
        parse_mode: "Markdown",
      });
    } else {
      await axios.post(`https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendMessage`, {
        chat_id: userChatId,
        text: message,
        parse_mode: "Markdown",
        disable_web_page_preview: true
      });
    }

    return true;
  } catch (error) {
    console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è –≤ Telegram:", error);
    return false;
  }
}

bot.start((ctx) => {
  userChatId = ctx.message.chat.id;
  console.log(`User's chat_id: ${userChatId}`);

  fs.appendFile('userChatIds.txt', userChatId + '\n', (err) => {
    if (err) {
      console.error('–ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è chat_id:', err);
    } else {
      console.log('chat_id –∑–±–µ—Ä–µ–∂–µ–Ω–æ:', userChatId);
    }
  });

  ctx.reply(
    '–ü—Ä–∏–≤—ñ—Ç! –Ø –Ω–æ–≤–∏–Ω–Ω–∏–π –±–æ—Ç. –Ø –±—É–¥—É –Ω–∞–¥—Å–∏–ª–∞—Ç–∏ —Ç–æ–±—ñ –æ—Å—Ç–∞–Ω–Ω—ñ –Ω–æ–≤–∏–Ω–∏.',
    Markup.keyboard([
      ["üì¢ –ù–æ–≤–∏–Ω–∏", "üìÜ –ü–æ–¥—ñ—ó"],
      ["‚Ñπ –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è", "‚ùì –î–æ–ø–æ–º–æ–≥–∞"],
    ])
      .oneTime()
      .resize()
  );
});

bot.hears("üì¢ –ù–æ–≤–∏–Ω–∏", async (ctx) => { await checkForNewArticles() });
bot.hears("üìÜ –ü–æ–¥—ñ—ó", (ctx) => ctx.reply("–°–ø–∏—Å–æ–∫ –ø–æ–¥—ñ–π..."));
bot.hears("‚Ñπ –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è", (ctx) => ctx.reply("–¶–µ –±–æ—Ç –¥–ª—è –Ω–æ–≤–∏–Ω."));
bot.hears("‚ùì –î–æ–ø–æ–º–æ–≥–∞", (ctx) => ctx.reply("–°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥: /start, /menu"));

bot.launch();

console.log("üéØ –ë–æ—Ç –≥–æ—Ç–æ–≤–∏–π –¥–æ —Ä–æ–±–æ—Ç–∏!");
